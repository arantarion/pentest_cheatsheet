import re
import os
import socket
import argparse
from termcolor import colored

_BASE_OUTPUT_PATH = "~/pentest/"

folders = [f"{_BASE_OUTPUT_PATH}cors",
			f"{_BASE_OUTPUT_PATH}crt_sh",
			f"{_BASE_OUTPUT_PATH}csp",
			f"{_BASE_OUTPUT_PATH}domain_info",
			f"{_BASE_OUTPUT_PATH}enumeration",
			f"{_BASE_OUTPUT_PATH}header",
			f"{_BASE_OUTPUT_PATH}nikto",
			f"{_BASE_OUTPUT_PATH}nmap",
			f"{_BASE_OUTPUT_PATH}hauditor",
			f"{_BASE_OUTPUT_PATH}nuclei",
			f"{_BASE_OUTPUT_PATH}ssh_audit",
			f"{_BASE_OUTPUT_PATH}testssl",
			f"{_BASE_OUTPUT_PATH}web_technology",
			f"{_BASE_OUTPUT_PATH}wpscan"
			]
for folder in folders:
    os.system(f"mkdir -p {folder}")


def split_newlines(lst):
    result = []
    for item in lst:
        if '\n' in item:
            result.extend(item.split('\n'))
        else:
            result.append(item)
    return result


def parse_arguments():
    parser = argparse.ArgumentParser(description="Generate ready to go commands from markdown files cheatsheets")
    parser.add_argument('--ip', '-i', type=str, default="", help="IP address")
    parser.add_argument('--url', '-u', type=str, default="", help="URL without HTTPS")
    parser.add_argument('--projectname', '-p', type=str, default="", help="Project name")
    parser.add_argument('--file', '-f', type=str, default="", help="Markdown file to read commands from")
    parser.add_argument('--type', '-t', type=str, default="webapp", help="The type of test e.g. webapp, iprange etc")
    return parser.parse_args()


def highlight_placeholders(command):
    return re.sub(r'\[.*?\]', lambda x: colored(x.group(), 'red'), command)


def print_list(lst):
	print(f"Running the following commands...\n")
	for entry in lst:
		print(f"âž¤ {entry}")
	print("\n\n")


def run_commands(commands):
	for command in commands:
		print("=======================================================================================================================")
		print(f"\nRunning: {command}\n")
		print("=======================================================================================================================\n\n")

		os.system(command)

		print("\n=======================================================================================================================\n\n")


def print_header(ip, url, url_wo_https, domain, projectname, pen_type):
    print("========================================")
    print("            Command Information         ")
    print("========================================")
    print(f"Type:		      {pen_type}")
    print(f"IP Address:       {ip}")
    print(f"URL:              {url}")
    print(f"URL without HTTPS:{url_wo_https}")
    print(f"Domain:           {domain}")
    print(f"Project Name:     {projectname}")
    print("========================================\n\n")


if __name__ == "__main__":

	args = parse_arguments()

	# -------------------------------------------------------

	_IP = ""
	_URL_WO_HTTPS = ""

	if args.url:
		_URL_WO_HTTPS = args.url

	# if not _URL_WO_HTTPS.startswith("www"):
    #		_URL_WO_HTTPS = f"www.{_URL_WO_HTTPS}"

	_URL = f"https://{_URL_WO_HTTPS}"
	_DOMAIN = _URL_WO_HTTPS.replace("www.", "")

	_PROJECTNAME = "".replace(" ", "_")
	if args.projectname:
		_PROJECTNAME = args.projectname.replace(" ", "_")

	_FILEPATH = "recon.md"
	if args.file:
		_FILEPATH = args.file

	# -------------------------------------------------------

	if not _IP:
		_IP = socket.gethostbyname(_URL_WO_HTTPS)

	print_header(_IP, _URL, _URL_WO_HTTPS, _DOMAIN, _PROJECTNAME, args.type)

	os.system(f"echo {_IP} >> {_BASE_OUTPUT_PATH}host.txt")
	os.system(f"echo {_URL_WO_HTTPS} >> {_BASE_OUTPUT_PATH}host.txt")
	os.system(f"echo {_URL} >> {_BASE_OUTPUT_PATH}host.txt")
	os.system(f"echo {_DOMAIN} >> {_BASE_OUTPUT_PATH}host.txt")

	with open(_FILEPATH, "r") as f:
		md_file = f.read()


	pattern = r'^```(?:\w+)?\s*\n(.*?)(?=^```)```'
	result = re.findall(pattern, md_file, re.DOTALL | re.MULTILINE)

	results = split_newlines(result)

	commands = []
	auto_commands = []
	auto_run = False
	for res in results:
		if res == "":
			continue

		if res.endswith("[AUTO]"):
			auto_run = True
		else:
			auto_run = False

		res = res.replace("\n\n", "\n")
		res = res.replace("[IP]", _IP)
		res = res.replace("[URL]", _URL)
		res = res.replace("[URL_WO_HTTPS]", _URL_WO_HTTPS)
		res = res.replace("[DOMAIN]", _DOMAIN)
		res = res.replace("[NAME]", _PROJECTNAME)
		res = res.replace("[AUTO]", "")

		new_res = ""
		if "[DOMAIN/IP]" in res:
			new_res = res
			new_res = new_res.replace("[DOMAIN/IP]", _IP)
			res = res.replace("[DOMAIN/IP]", _URL)

		new_res2 = ""
		if "[URL_WO_HTTPS/URL]" in res:
			new_res2 = res
			new_res2 = new_res2.replace("[URL_WO_HTTPS/URL]", _URL_WO_HTTPS)
			res = res.replace("[URL_WO_HTTPS/URL]", _URL)

		commands.append(res)
		if new_res:
			commands.append(new_res)

		if new_res2:
			commands.append(new_res2)

		if auto_run:
			auto_commands.append(res)
			if new_res:
				auto_commands.append(new_res)
			if new_res2:
				auto_commands.append(new_res2)

	for cmd in commands:
		print(highlight_placeholders(cmd), "\n")

	user_input = input("Do you want to run some of these tools automatically? (y/N): ").strip().lower()
	if user_input == "y":
		print_list(auto_commands)
		run_commands(auto_commands)